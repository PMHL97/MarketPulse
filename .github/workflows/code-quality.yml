name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'java', 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Setup Java (for Java analysis)
      if: matrix.language == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build Java services (for CodeQL)
      if: matrix.language == 'java'
      run: |
        cd backend/user-service && mvn clean compile
        cd ../article-storage-service && mvn clean compile
        
    - name: Setup Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install frontend dependencies (for CodeQL)
      if: matrix.language == 'javascript'
      run: npm ci
      
    - name: Setup Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies (for CodeQL)
      if: matrix.language == 'python'
      run: |
        cd backend/analysis-service
        pip install -r requirements.txt
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check frontend licenses
      run: |
        npm ci
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages
        
    - name: Setup Java for license check
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Check Java dependencies licenses
      run: |
        cd backend/user-service
        mvn org.codehaus.mojo:license-maven-plugin:2.0.0:add-third-party
        cd ../article-storage-service  
        mvn org.codehaus.mojo:license-maven-plugin:2.0.0:add-third-party

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Setup SonarQube Scanner
      uses: warchant/setup-sonar-scanner@v7
      
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Run frontend tests with coverage
      run: npm run test:coverage --if-present
      
    - name: Build and test Java services
      run: |
        cd backend/user-service
        mvn clean verify sonar:sonar -Dsonar.projectKey=marketpulse-user-service
        cd ../article-storage-service
        mvn clean verify sonar:sonar -Dsonar.projectKey=marketpulse-article-service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test Python service with coverage
      run: |
        cd backend/analysis-service
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pytest --cov=. --cov-report=xml
        
    - name: SonarQube Scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=marketpulse \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'marketpulse-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend.sarif'
        
    - name: Upload Trivy scan results - Frontend
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-frontend.sarif'
        category: 'trivy-frontend'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
