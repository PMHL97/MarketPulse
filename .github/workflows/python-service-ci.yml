name: Python Analysis Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/analysis-service/**'
      - '.github/workflows/python-service-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/analysis-service/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10.0, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: ./backend/analysis-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
        
    - name: Lint with flake8
      working-directory: ./backend/analysis-service
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      working-directory: ./backend/analysis-service
      run: black --check .
      
    - name: Check import sorting with isort
      working-directory: ./backend/analysis-service
      run: isort --check-only .
      
    - name: Type check with mypy
      working-directory: ./backend/analysis-service
      run: mypy . --ignore-missing-imports
      
    - name: Test with pytest
      working-directory: ./backend/analysis-service
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/analysis-service/coverage.xml
        directory: ./backend/analysis-service/
        flags: analysis-service
        name: analysis-service-coverage
        
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: backend/analysis-service/htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend/analysis-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run safety check
      working-directory: ./backend/analysis-service
      run: safety check
      
    - name: Run bandit security scan
      working-directory: ./backend/analysis-service
      run: bandit -r . -f json -o bandit-report.json
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: backend/analysis-service/bandit-report.json

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/analysis-service
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/marketpulse-analysis-service:latest
          ${{ secrets.DOCKER_USERNAME }}/marketpulse-analysis-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
