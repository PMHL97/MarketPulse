name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: 
          - name: frontend
            context: .
            dockerfile: ./Dockerfile.frontend
          - name: user-service
            context: ./backend/user-service
            dockerfile: ./backend/user-service/Dockerfile
          - name: article-storage-service
            context: ./backend/article-storage-service
            dockerfile: ./backend/article-storage-service/Dockerfile
          - name: analysis-service
            context: ./backend/analysis-service
            dockerfile: ./backend/analysis-service/Dockerfile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: [build-and-push-images]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        kubectl config current-context
        
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        export IMAGE_TAG=${{ github.sha }}
        envsubst < k8s/frontend.yaml | kubectl apply -f -
        envsubst < k8s/user-service.yaml | kubectl apply -f -
        envsubst < k8s/article-service.yaml | kubectl apply -f -
        envsubst < k8s/analysis-service.yaml | kubectl apply -f -
        
        # Apply other manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/ingress.yaml
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/frontend -n marketpulse
        kubectl rollout status deployment/user-service -n marketpulse
        kubectl rollout status deployment/article-service -n marketpulse
        kubectl rollout status deployment/analysis-service -n marketpulse
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=frontend -n marketpulse --timeout=300s
        
        # Get service URLs
        FRONTEND_URL=$(kubectl get service frontend -n marketpulse -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Basic health checks
        curl -f http://$FRONTEND_URL/health || exit 1
        echo "✅ Frontend health check passed"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-to-k8s]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        message: |
          MarketPulse deployment ${{ job.status }}!
          
          🚀 Branch: ${{ github.ref_name }}
          📝 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}
          
          🔗 [View deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
